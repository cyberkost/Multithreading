Задача: Создайте класс CurrencyExchange, который будет содержать информацию о текущих обменных курсах для различных валют.
Класс должен иметь методы для добавления нового обменного курса и для получения обменного курса между двумя валютами.
Создайте класс ExchangeApp, который будет представлять пользовательский интерфейс программы.
В этом классе пользователь должен иметь возможность выбрать исходную валюту, целевую валюту и указать сумму для обмена.
Реализуйте методы класса CurrencyExchange для добавления нового обменного курса и получения обменного курса между двумя валютами.
Вы можете использовать HashMap для хранения обменных курсов, где ключом будет пара валют, а значением - обменный курс.
В методе ExchangeApp пользователь должен вводить коды валют в формате ISO 4217 (например, USD, EUR, GBP) и сумму для обмена.
После ввода, программа должна вывести эквивалентную сумму в целевой валюте, основываясь на текущем обменном курсе.
Напишите программу на Java для создания простого обменника валюты.
Программа должна предлагать пользователям обменивать сумму в одной валюте на эквивалентную сумму в другой валюте на основе текущего обменного курса.


Задача: Ресторан обслуживает несколько клиентов, у каждого из которых есть свой баланс на счете.
Ресторан принимает оплату только электронными средствами. Клиенты могут пополнять свой баланс и совершать покупки в ресторане.
Необходимо написать программу на языке Java, используя синхронизатор Exchanger, которая позволяет корректно обрабатывать операции пополнения баланса и покупки клиентами.
Класс Client представляет клиента ресторана и имеет два метода: topUpBalance(double amount) для пополнения баланса клиента и makePurchase(double amount) для совершения покупки на указанную сумму. Каждый клиент должен иметь уникальный идентификатор.
Класс Restaurant является основным классом программы и содержит метод main. В этом классе создаются несколько клиентов и запускаются потоки для выполнения операций пополнения баланса и покупки.
Операция пополнения баланса (topUpBalance) должна быть безопасной для многопоточного доступа и должна использовать синхронизатор Exchanger для передачи данных между клиентами и рестораном.
Операция покупки (makePurchase) также должна быть безопасной для многопоточного доступа и должна использовать синхронизатор Exchanger для проверки баланса клиента и уменьшения его значения при успешной покупке.
Если у клиента недостаточно средств на балансе для покупки, он должен получить сообщение о недостаточности средств.
В конце программы необходимо вывести текущий баланс каждого клиента.